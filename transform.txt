Transform preprocessed cost code data into a hierarchical JSON structure. The input data has these columns:
build,floor,area,hour,full,label
1. DATA STRUCTURE
Input format:
- build: Building name (e.g., "Building 1 North")
- floor: Floor name (e.g., "Floor 01")
- area: Area name (e.g., "Area A")
- hour: Hours as number
- full: Original full code
- label: Work description
2. PROCESSING RULES
- Each building appears once as a primary node
- Each floor appears once per building
- Areas are grouped under floors
- Work items are grouped under areas
- Use Set for uniqueness at each level
- Map for collecting items
3. REQUIRED OUTPUT STRUCTURE
```json
[
  {
    "label": "Building Name",
    "children": [
      {
        "label": "Floor Name",     // EXACTLY once per building
        "children": [
          {
            "label": "Area Name",
            "children": [
              {
                "label": "Work Description",
                "hours": number,
                "fullCode": "Original Code"
              }
            ]
          }
        ]
      }
    ]
  }
]
```
4. PROCESSING STEPS
```javascript
function processStructuredData(rows) {
  // Primary storage
  const buildingMap = new Map();
  const floorSets = new Map();
  // First pass - collect unique floors per building
  rows.forEach(row => {
    const {build, floor} = row;
    if (!floorSets.has(build)) {
      floorSets.set(build, new Set());
    }
    if (floor) {
      floorSets.get(build).add(floor);
    }
  });
  // Second pass - build structure
  rows.forEach(row => {
    const {build, floor, area, hour, full, label} = row;
    if (!buildingMap.has(build)) {
      buildingMap.set(build, {
        label: build,
        children: []
      });
    }
    const buildingNode = buildingMap.get(build);
    // Find or create floor
    let floorNode = buildingNode.children.find(f => f.label === floor);
    if (!floorNode && floor) {
      floorNode = {
        label: floor,
        children: []
      };
      buildingNode.children.push(floorNode);
    }
    // Find or create area
    if (floor && area) {
      let areaNode = floorNode.children.find(a => a.label === area);
      if (!areaNode) {
        areaNode = {
          label: area,
          children: []
        };
        floorNode.children.push(areaNode);
      }
      // Add work item
      areaNode.children.push({
        label: label,
        hours: parseInt(hour),
        fullCode: full
      });
    } else if (!floor) {
      // Handle items without floor/area (e.g., General Conditions)
      buildingNode.children.push({
        label: label,
        hours: parseInt(hour),
        fullCode: full
      });
    }
  });
  return Array.from(buildingMap.values());
}
```
5. VALIDATION
```javascript
function validateStructure(result) {
  result.forEach(building => {
    const floorLabels = new Set();
    building.children.forEach(floor => {
      // Skip validation for leaf nodes (e.g., General Conditions)
      if (!floor.children) return;
      if (floorLabels.has(floor.label)) {
        throw new Error(`Duplicate floor ${floor.label} in ${building.label}`);
      }
      floorLabels.add(floor.label);
    });
  });
  return result;
}
```
6. EXAMPLE
Input:
```
build,floor,area,hour,full,label
Building 1 North,Floor 01,Area A,12,B1 F01 AA 5400 - N FL 01 Area A Int Ext Frame,Ext Frame
Building 1 North,Floor 01,Area B,10,B1 F01 AB 5400 - N FL 01 Area B Int Ext Frame,Ext Frame
```
Output:
```json
[
  {
    "label": "Building 1 North",
    "children": [
      {
        "label": "Floor 01",
        "children": [
          {
            "label": "Area A",
            "children": [
              {
                "label": "Ext Frame",
                "hours": 12,
                "fullCode": "B1 F01 AA 5400 - N FL 01 Area A Int Ext Frame"
              }
            ]
          },
          {
            "label": "Area B",
            "children": [
              {
                "label": "Ext Frame",
                "hours": 10,
                "fullCode": "B1 F01 AB 5400 - N FL 01 Area B Int Ext Frame"
              }
            ]
          }
        ]
      }
    ]
  }
]
```
7. CRITICAL RULES
- Use Map/Set for all grouping
- Process rows in order
- Maintain hierarchy integrity
- Guarantee unique floors
- Handle special cases (General Conditions)
- Preserve all data
Return properly formatted JSON with guaranteed unique entries at each level.